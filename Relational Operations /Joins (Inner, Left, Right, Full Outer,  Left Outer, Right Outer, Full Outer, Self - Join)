#### Inner Join
-- This is the most common join type and the default in many SQL implementations
-- It returns only the rows where there is a match in both tables

SELECT column_name(s)
FROM Table_A
INNER JOIN Table_B ON Table_A.column_name = Table_B.column_name;

----------------------------------------------------------

#### Left Join General Form
-- Returns all records from the left table (Table_A) and matched records from the right table (Table_B)
-- If no match is found in Table_B, NULL values are returned for Table_B columns

SELECT column_name(s)
FROM Table_A
LEFT JOIN Table_B ON Table_A.column_name = Table_B.column_name;

----------------------------------------------------------

#### Right Join General Form
-- Returns all records from the right table (Table_B) and matched records from the left table (Table_A)
-- If no match is found in Table_A, NULL values are returned for Table_A columns

SELECT column_name(s)
FROM Table_A
RIGHT JOIN Table_B ON Table_A.column_name = Table_B.column_name;

----------------------------------------------------------

#### Full Outer Join
-- Returns all records when there is a match in either the left (Table_A) or right (Table_B) table
-- If no match is found, NULL values are returned for the columns of the table without a match

SELECT column_name(s)
FROM Table_A
FULL OUTER JOIN Table_B ON Table_A.column_name = Table_B.column_name;
-- FULL JOIN is commonly used with aggregations to understand the amount of overlap between two tables

----------------------------------------------------------

#### Full Outer Join If Null
-- This query finds only the unmatched rows from both tables
-- It will return rows from Table_A that don't have matches in Table_B and vice versa

SELECT column_name(s)
FROM Table_A
FULL OUTER JOIN Table_B ON Table_A.column_name = Table_B.column_name
WHERE Table_A.column_name IS NULL OR Table_B.column_name IS NULL;

----- Customer/Employee/Manager Tables Examples ----------------

-- INNER JOIN example: Returns only customers who have placed orders
-- Shows customer info along with their order details

SELECT ec.customer_id, ec.customer_name, ec.age, eo.product_name, eo.order_date 
FROM ecustomer ec 
INNER JOIN eorders eo ON ec.customer_id = eo.customer_id;

----------------------------------------------------------

-- LEFT OUTER JOIN example: Returns all customers regardless of whether they placed orders
-- Customers without orders will have NULL values in the order columns

SELECT ec.customer_id, ec.customer_name, ec.age, eo.product_name, eo.order_date 
FROM ecustomer ec 
LEFT OUTER JOIN eorders eo ON ec.customer_id = eo.customer_id;

----------------------------------------------------------

-- RIGHT OUTER JOIN example: Returns all orders regardless of whether the customer exists
-- Orders without matching customers will have NULL values in the customer columns

SELECT eo.customer_id, ec.customer_name, ec.age, eo.product_name, eo.order_date 
FROM ecustomer ec 
RIGHT OUTER JOIN eorders eo ON ec.customer_id = eo.customer_id;

----------------------------------------------------------

-- FULL OUTER JOIN example: Returns all customers and all orders
-- Shows unmatched customers (no orders) and unmatched orders (no customer record)

SELECT ec.customer_id, ec.customer_name, ec.age, eo.product_name, eo.order_date 
FROM ecustomer ec 
FULL OUTER JOIN eorders eo ON ec.customer_id = eo.customer_id;

----------------------------------------------------------

-- Self-join example: Used to find hierarchical relationships within the same table
-- This query matches employees with their managers from the same table

SELECT EMP.EMPLOYEE_NAME AS EMPLOYEE_NAME, MAN.EMPLOYEE_NAME AS MANAGER_NAME 
FROM MANAGERS MAN, MANAGERS EMP
WHERE MAN.EMPLOYEE_ID = EMP.REPORTING_MANAGER_ID;

----------------------------------------------------------

-- Note: This uses older-style implicit join syntax instead of the explicit JOIN keyword
-- Modern equivalent would be:

-- SELECT EMP.EMPLOYEE_NAME AS EMPLOYEE_NAME, MAN.EMPLOYEE_NAME AS MANAGER_NAME 
-- FROM MANAGERS EMP
-- INNER JOIN MANAGERS MAN ON MAN.EMPLOYEE_ID = EMP.REPORTING_MANAGER_ID;

----------------------------------------------------------
